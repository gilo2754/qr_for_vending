version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT_HOST}:${API_PORT}"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - API_HOST=0.0.0.0
      - API_PORT=${API_PORT}
      - DEBUG=True
    depends_on:
      - db
    command: sh -c "python qrcode_generator.py"
    networks:
      - qr-network

  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    ports:
      - "${DB_PORT_HOST}:${DB_PORT_HOST}"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - qr-network
    restart: unless-stopped

  mysql-backup:
    image: mysql:8
    container_name: mysql-backup
    volumes:
      - ./backups:/backups
      - mysql_data:/var/lib/mysql:ro
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    entrypoint: []
    command: >
      sh -c '
      while true; do
        echo "Starting backup process at $(date)"
        TIMESTAMP=$$(date +%Y%m%d-%H%M)
        BACKUP_FILE="${DB_NAME}_$${TIMESTAMP}.sql.gz"
        echo "Creating MySQL backup..."
        
        # Wait for MySQL to be ready
        for i in {1..30}; do
          if mysqladmin ping -h"${DB_HOST}" -u"${DB_USER}" -p"${DB_PASSWORD}" > /dev/null 2>&1; then
            break
          fi
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done
        
        # Create backup with error checking
        if mysqldump --single-transaction --quick --no-tablespaces -h "${DB_HOST}" -u "${DB_USER}" -p"${DB_PASSWORD}" "${DB_NAME}" 2>/tmp/error.log | gzip > "/backups/$${BACKUP_FILE}"; then
          if [ -s /tmp/error.log ]; then
            echo "Warning: Backup completed with warnings:"
            cat /tmp/error.log
          else
            echo "Backup created successfully: $${BACKUP_FILE}"
            echo "Cleaning up old backups..."
            ls -t /backups/${DB_NAME}_*.sql.gz | tail -n +8 | xargs -r rm
            echo "Backup process completed successfully at $(date)"
          fi
        else
          echo "Error: Failed to create backup"
          if [ -f /tmp/error.log ]; then
            cat /tmp/error.log
          fi
          rm -f "/backups/$${BACKUP_FILE}"
        fi
        rm -f /tmp/error.log
        sleep 300
      done'
    networks:
      - qr-network
    depends_on:
      - db

networks:
  qr-network:
    driver: bridge

volumes:
  mysql_data:
    name: qr_mysql_data
    driver: local
